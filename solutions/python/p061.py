"""
Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are
all figurate (polygonal) numbers and are generated by the following formulae:

Triangle         P3,n=n(n+1)/2         1, 3, 6, 10, 15, ...
Square           P4,n=n2         1, 4, 9, 16, 25, ...
Pentagonal       P5,n=n(3n-1)/2         1, 5, 12, 22, 35, ...
Hexagonal        P6,n=n(2n-1)         1, 6, 15, 28, 45, ...
Heptagonal       P7,n=n(5n-3)/2         1, 7, 18, 34, 55, ...
Octagonal        P8,n=n(3n-2)         1, 8, 21, 40, 65, ...
The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three
interesting properties.

The set is cyclic, in that the last two digits of each number is the first two
digits of the next number (including the last number with the first).
Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and
pentagonal (P5,44=2882), is represented by a different number in the set.
This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for which
each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and
octagonal, is represented by a different number in the set.
"""


def run():
    """
    Construct a big set of all 6 kinds of numbers and do a constrained search
    through them for 6 distinct cycled 4 digit numbers.

    Optimizations: 3rd digit can't be 0. Set of all first two and last two
    digits cannot exceed cardinality 6.
    """

    figurates = [set() for _ in xrange(6)]
    for n in xrange(19, 141):
        triangle = n * (n + 1) / 2
        if triangle > 1000 and triangle < 10000:
            figurates[0].add(triangle)
        square = n * n
        if square > 1000 and square < 10000:
            figurates[1].add(square)
        pentagonal = n * (3 * n - 1) / 2
        if pentagonal > 1000 and pentagonal < 10000:
            figurates[2].add(pentagonal)
        hexgonal = n * (2 * n - 1)
        if hexgonal > 1000 and hexgonal < 10000:
            figurates[3].add(hexgonal)
        heptagonal = n * (5 * n - 3) / 2
        if heptagonal > 1000 and heptagonal < 10000:
            figurates[4].add(heptagonal)
        octagonal = n * (3 * n - 2)
        if octagonal > 1000 and octagonal < 10000:
            figurates[5].add(octagonal)

    for n1 in figurates[5]:
        if not valid(n1):
            continue
        for n2 in figurates[4]:
            if not valid(n2):
                continue
            for n3 in figurates[3]:
                if not valid(n3):
                    continue
                for n4 in figurates[2]:
                    if not valid(n4) or not valid_set(n1, n2, n3, n4):
                        continue
                    for n5 in figurates[1]:
                        if not valid(n5) or not valid_set(n1, n2, n3, n4, n5):
                            continue
                        for n6 in figurates[0]:
                            if not valid(n6) or \
                            not is_cyclic(n1, n2, n3, n4, n5, n6):
                                continue
                            else:
                                return n1 + n2 + n3 + n4 + n5 + n6


def is_cyclic(*numbers):
    S = {get_first_2(number): number for number in numbers}
    curr = numbers[0]
    try:
        while len(S) > 0:
            f2 = curr % 100
            nex = S[f2]
            curr = nex
            del S[f2]
    except:
        return False
    return True


def valid_set(*numbers):
    digits = set()
    for number in numbers:
        f2 = get_first_2(number)
        l2 = number % 100
        digits.add(f2)
        digits.add(l2)
        if len(digits) > 6:
            return False
    return True


def valid(n):
    if str(n)[2] == '0':
        return False
    return True


def get_first_2(n):
    return (n - n % 100) / 100
